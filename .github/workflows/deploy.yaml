name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (e.g., staging-*, prod-*)'
        required: true
        type: string
      environment:
        description: 'Environment to deploy (staging or prod)'
        required: true
        type: choice
        options:
          - staging
          - production
          - development

env:
  STAGING_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_STAGING }}
  PROD_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_PROD }}

jobs:
  deploy:
    permissions:
        id-token: write
        contents: write
        # contents: write

    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          # Automatically uses the `GITHUB_TOKEN` provided by GitHub
          # token: ${{ secrets.GITHUB_TOKEN }}

      # Validate inputs and set environment variables
      - name: Set Environment Variables
        run: |
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            if [[ "${{ inputs.branch }}" != staging-v* ]]; then
              echo "Error: Branch name for staging must start with 'staging-v'."
              exit 1
            fi
            echo "PROJECT_ID=${{ env.STAGING_PROJECT_ID }}" >> $GITHUB_ENV
          elif [[ "${{ inputs.environment }}" == "prod" ]]; then
            if [[ "${{ inputs.branch }}" != prod-v* ]]; then
              echo "Error: Branch name for prod must start with 'prod-v'."
              exit 1
            fi
            echo "PROJECT_ID=${{ env.PROD_PROJECT_ID }}" >> $GITHUB_ENV
          else
            echo "Error: Invalid environment '${{ inputs.environment }}'."
            exit 1
          fi

      # Authenticate with GCP using Workload Identity Federation
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          # token_format: "access_token"
          workload_identity_provider: "projects/1034644372679/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
          service_account: "gha-pusher@my-kubernetes-project-438008.iam.gserviceaccount.com"


      # Make the deployment script executable
      - name: Make Deploy Script Executable
        run: chmod +x scripts/deploy.sh

      # Execute the deployment script
      - name: Push Docker Image
        run: ./scripts/deploy.sh ${{ inputs.environment }}


      # - name: Create Unique Git Tag
      #   run: |
      #     TAG_NAME="staging-release-${{ github.sha }}-${{ github.run_number }}"
      #     git tag $TAG_NAME
      #     git push origin $TAG_NAME



      # # Update deployment.yaml with new image tag
      # - name: Set Git user for commit
      #   run: |
      #     git config --global user.name "ci-cd-bot"
      #     git config --global user.email "ci-cd-bot@mydomain.com"
          
      # - name: Update deployment.yaml with new image tag
      #   run: |
      #     ENVIRONMENT=${{ inputs.environment }}
      #     IMAGE_TAG="us.gcr.io/${{ env.PROJECT_ID }}/my-app:${ENVIRONMENT}-$(git rev-parse --short HEAD)"
      #     echo "Updating deployment.yaml with image tag: $IMAGE_TAG"

      #     # Determine the path to the deployment.yaml based on the environment
      #     # DEPLOYMENT_FILE="k8s/${ENVIRONMENT}/deployment.yaml"
      #     DEPLOYMENT_FILE="k8/deploy.yaml"

      #     # Print the current image line before replacement for debugging
      #     echo "Current image in deployment.yaml:"
      #     grep image $DEPLOYMENT_FILE

      #     # Update the deployment.yaml file with the new image tag
      #     # sed -i "s|image: us.gcr.io.*my-app:.*|image: ${IMAGE_TAG}|" $DEPLOYMENT_FILE
      #     sed -i "s|image: <IMAGE>|image: ${IMAGE_TAG}|" $DEPLOYMENT_FILE

      #     # Print the updated file to verify changes
      #     echo "Updated deployment.yaml:"
      #     cat $DEPLOYMENT_FILE

          
      #     # Check if the deployment.yaml was modified
      #     git diff --exit-code $DEPLOYMENT_FILE || (git add $DEPLOYMENT_FILE && git commit -m "Update image tag for $ENVIRONMENT environment to ${IMAGE_TAG}" && git push)
